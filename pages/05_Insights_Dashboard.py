import streamlit as st

# Set page configuration - must be the first Streamlit command
st.set_page_config(
    page_title="Insights Dashboard | Analytics Assist",
    page_icon="üí°",
    layout="wide"
)

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime
import json
from utils.ai_suggestions import generate_dataset_insights, answer_data_question
from utils.visualization import create_visualization_from_suggestion
from utils.auth_redirect import require_auth
from utils.custom_navigation import render_navigation, initialize_navigation
from utils.global_config import apply_global_css
from utils.access_control import check_access
from utils.ai_learning import display_feedback_form, create_feedback_buttons

# Apply global CSS
apply_global_css()

# Initialize navigation
initialize_navigation()

# Hide Streamlit's default multipage navigation menu
st.markdown("""
    <style>
        [data-testid="stSidebarNav"] {
            display: none !important;
        }
    </style>
""", unsafe_allow_html=True)

# Render custom navigation bar
render_navigation()

# Check authentication first
if not require_auth():
    st.stop()  # Stop if not authenticated

# Show user info if authenticated
if "user" in st.session_state:
    st.sidebar.success(f"Logged in as: {st.session_state.user.get('email', 'User')}")
    st.sidebar.info(f"Subscription: {st.session_state.subscription_tier.capitalize()}")

# Check if dataset exists in session state
if 'dataset' not in st.session_state or st.session_state.dataset is None:
    st.warning("Please upload a dataset first.")
    st.button("Go to Upload Page", on_click=lambda: st.switch_page("pages/01_Upload_Data.py"))
    st.stop()

# Header and description
st.title("AI-Generated Insights Dashboard")
st.markdown("""
Discover valuable insights about your data automatically generated by our AI.
These insights highlight key findings, patterns, and anomalies in your dataset.
""")

# Get the dataset from session state
df = st.session_state.dataset

# Initialize insights in session state if they don't exist
if 'generated_insights' not in st.session_state:
    st.session_state.generated_insights = []

# Display dataset info in sidebar
st.sidebar.subheader("Dataset Info")
st.sidebar.info(f"""
- **Rows**: {df.shape[0]}
- **Columns**: {df.shape[1]}
- **Project**: {st.session_state.current_project.get('name', 'Unnamed project')}
""")

# Check if user has access to AI insights
if not check_access("ai_insights"):
    st.warning("AI-powered insights are available on Basic, Pro, and Enterprise plans only.")
    st.markdown("""
    Upgrade your plan to get intelligent insights about your data. 
    Our AI can analyze your dataset to find patterns, trends, outliers, and more.
    """)
    
    if st.button("View Subscription Plans"):
        st.switch_page("pages/subscription.py")
    st.stop()

# Check for OpenAI API key
from utils.api_key_handler import check_api_key_and_display_form

# If the API key is not available, display the form and stop the page execution
if not check_api_key_and_display_form():
    st.stop()
else:
    # Create tabs for different insights features
    tab1, tab2, tab3 = st.tabs(["üîç Generate Insights", "‚ùì Ask Questions", "üìä Visualizations"])
    
    with tab1:
        st.header("Automated Insights")
        
        # Add button to generate insights
        if st.button("Generate Insights") or ('generated_insights' in st.session_state and not st.session_state.generated_insights):
            with st.spinner("Generating insights... This may take a moment."):
                try:
                    # Generate insights using AI
                    insights = generate_dataset_insights(df)
                    
                    # Check if insights is a string (raw JSON) and parse it if needed
                    if isinstance(insights, str):
                        try:
                            insights = json.loads(insights)
                        except Exception as e:
                            st.error(f"Error parsing insights: {str(e)}")
                    
                    # Ensure we have a proper structure for insights
                    if isinstance(insights, dict) and 'insights' in insights:
                        insights = insights['insights']
                    
                    # Ensure it's a list
                    if not isinstance(insights, list):
                        insights = [insights] if insights else []
                    
                    # Store in session state
                    st.session_state.generated_insights = insights
                    
                    # Success message
                    st.success("Insights generated successfully!")
                except Exception as e:
                    st.error(f"Error generating insights: {str(e)}")
                    st.session_state.generated_insights = []
        
        # Display insights if they exist
        if 'generated_insights' in st.session_state and st.session_state.generated_insights:
            insights = st.session_state.generated_insights
            
            # Split insights into categories
            general_insights = [i for i in insights if i["category"] == "general"]
            statistical_insights = [i for i in insights if i["category"] == "statistical"]
            pattern_insights = [i for i in insights if i["category"] == "pattern"]
            anomaly_insights = [i for i in insights if i["category"] == "anomaly"]
            
            # Display insights by category
            if general_insights:
                st.subheader("General Observations")
                for i, insight in enumerate(general_insights):
                    with st.container():
                        st.markdown(f"""
                        #### {insight['title']}
                        {insight['description']}
                        """)
                        
                        # Add visualization if available
                        if "visualization" in insight and insight["visualization"]:
                            try:
                                fig = create_visualization_from_suggestion(df, insight["visualization"])
                                st.plotly_chart(fig, use_container_width=True)
                            except Exception as e:
                                st.error(f"Error creating visualization: {str(e)}")
                        
                        # Add feedback buttons
                        create_feedback_buttons(
                            "insight", 
                            f"general_{i}", 
                            original_response=insight["description"]
                        )
                        
                        st.markdown("---")
            
            if statistical_insights:
                st.subheader("Statistical Insights")
                for i, insight in enumerate(statistical_insights):
                    with st.container():
                        st.markdown(f"""
                        #### {insight['title']}
                        {insight['description']}
                        """)
                        
                        # Add visualization if available
                        if "visualization" in insight and insight["visualization"]:
                            try:
                                fig = create_visualization_from_suggestion(df, insight["visualization"])
                                st.plotly_chart(fig, use_container_width=True)
                            except Exception as e:
                                st.error(f"Error creating visualization: {str(e)}")
                        
                        # Add feedback buttons
                        create_feedback_buttons(
                            "insight", 
                            f"statistical_{i}", 
                            original_response=insight["description"]
                        )
                        
                        st.markdown("---")
            
            if pattern_insights:
                st.subheader("Patterns & Trends")
                for i, insight in enumerate(pattern_insights):
                    with st.container():
                        st.markdown(f"""
                        #### {insight['title']}
                        {insight['description']}
                        """)
                        
                        # Add visualization if available
                        if "visualization" in insight and insight["visualization"]:
                            try:
                                fig = create_visualization_from_suggestion(df, insight["visualization"])
                                st.plotly_chart(fig, use_container_width=True)
                            except Exception as e:
                                st.error(f"Error creating visualization: {str(e)}")
                        
                        # Add feedback buttons
                        create_feedback_buttons(
                            "insight", 
                            f"pattern_{i}", 
                            original_response=insight["description"]
                        )
                        
                        st.markdown("---")
            
            if anomaly_insights:
                st.subheader("Anomalies & Outliers")
                for i, insight in enumerate(anomaly_insights):
                    with st.container():
                        st.markdown(f"""
                        #### {insight['title']}
                        {insight['description']}
                        """)
                        
                        # Add visualization if available
                        if "visualization" in insight and insight["visualization"]:
                            try:
                                fig = create_visualization_from_suggestion(df, insight["visualization"])
                                st.plotly_chart(fig, use_container_width=True)
                            except Exception as e:
                                st.error(f"Error creating visualization: {str(e)}")
                        
                        # Add feedback buttons
                        create_feedback_buttons(
                            "insight", 
                            f"anomaly_{i}", 
                            original_response=insight["description"]
                        )
                        
                        st.markdown("---")
            
            # Add a download button for insights
            st.download_button(
                label="Download Insights as JSON",
                data=json.dumps(insights, indent=2),
                file_name="insights.json",
                mime="application/json"
            )
        
        # Add feature to save insights
        st.markdown("---")
        if 'generated_insights' in st.session_state and st.session_state.generated_insights:
            if st.button("Save Insights to Database"):
                if 'dataset_id' in st.session_state:
                    try:
                        from utils.database import save_insight
                        
                        for insight in st.session_state.generated_insights:
                            save_insight(
                                st.session_state.dataset_id,
                                insight['title'],
                                insight['category'],
                                json.dumps(insight),
                                importance=insight.get('importance', 5)
                            )
                        
                        st.success("Insights saved to database!")
                    except Exception as e:
                        st.error(f"Error saving insights: {str(e)}")
                else:
                    st.error("Dataset not saved to database. Please save the dataset first.")
    
    with tab2:
        st.header("Ask Questions About Your Data")
        
        # Example questions
        st.markdown("### Example Questions")
        example_questions = [
            "What is the correlation between columns A and B?",
            "Which products have the highest sales?",
            "How has the trend changed over time?",
            "Which factors most affect the target variable?",
            "What are the key outliers in the dataset?"
        ]
        
        # Customize example questions based on dataset columns
        if df is not None:
            columns = df.columns.tolist()
            
            if len(columns) >= 2:
                # If we have at least 2 columns, create a custom correlation question
                example_questions[0] = f"What is the correlation between {columns[0]} and {columns[1]}?"
            
            # Try to find numeric columns for analysis
            numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
            if numeric_cols:
                example_questions[3] = f"What factors most affect {numeric_cols[0]}?"
                example_questions[4] = f"What are the key outliers in {numeric_cols[0]}?"
            
            # Look for potential categorical and date columns
            categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
            if categorical_cols:
                example_questions[1] = f"What is the distribution of {categorical_cols[0]}?"
            
            date_cols = [col for col in df.columns if pd.api.types.is_datetime64_any_dtype(df[col])]
            if date_cols:
                example_questions[2] = f"How has the trend changed over time for {date_cols[0]}?"
        
        # Create example question buttons
        cols = st.columns(len(example_questions))
        for i, question in enumerate(example_questions):
            with cols[i]:
                if st.button(f"Q{i+1}", help=question, key=f"q{i+1}"):
                    st.session_state.question = question
        
        # Create input for custom question
        question = st.text_area(
            "Ask a question about your data:", 
            value=st.session_state.get("question", ""),
            help="Enter your question about the dataset here."
        )
        
        # Button to submit the question
        if st.button("Get Answer") and question:
            with st.spinner("Analyzing your question... Please wait."):
                try:
                    # Generate answer using AI
                    answer = answer_data_question(df, question)
                    
                    # Display the answer
                    st.markdown("### Answer")
                    st.markdown(answer["text"])
                    
                    # Display visualization if available
                    if "visualization" in answer and answer["visualization"]:
                        try:
                            fig = create_visualization_from_suggestion(df, answer["visualization"])
                            st.plotly_chart(fig, use_container_width=True)
                        except Exception as e:
                            st.error(f"Error creating visualization: {str(e)}")
                    
                    # Add feedback buttons
                    question_id = hash(question) % 10000  # Simple hash for ID
                    create_feedback_buttons(
                        "question", 
                        f"q_{question_id}", 
                        original_prompt=question,
                        original_response=json.dumps(answer)
                    )
                except Exception as e:
                    st.error(f"Error analyzing your question: {str(e)}")
    
    with tab3:
        st.header("AI-Suggested Visualizations")
        
        # Button to generate visualization suggestions
        if st.button("Generate Visualization Suggestions"):
            with st.spinner("Generating visualization suggestions..."):
                try:
                    from utils.ai_suggestions import suggest_visualizations
                    
                    # Generate visualization suggestions
                    suggestions = suggest_visualizations(df)
                    
                    # Store in session state
                    st.session_state.viz_suggestions = suggestions
                except Exception as e:
                    st.error(f"Error generating visualization suggestions: {str(e)}")
                    st.session_state.viz_suggestions = []
        
        # Display visualization suggestions if they exist
        if 'viz_suggestions' in st.session_state and st.session_state.viz_suggestions:
            suggestions = st.session_state.viz_suggestions
            
            # Our suggest_visualizations function should already return a normalized list,
            # but let's add a safety check just in case
            if isinstance(suggestions, str):
                try:
                    suggestions = json.loads(suggestions)
                except Exception as e:
                    st.error(f"Error parsing visualization suggestions: {str(e)}")
                    
            # Handle different possible response formats
            if isinstance(suggestions, dict):
                # Check for common response structures
                if 'visualizations' in suggestions:
                    suggestions = suggestions['visualizations']
                elif 'visualization_recommendations' in suggestions:
                    suggestions = suggestions['visualization_recommendations']
                elif 'recommendations' in suggestions:
                    suggestions = suggestions['recommendations']
                elif 'chart_type' in suggestions:
                    # It's a single visualization
                    suggestions = [suggestions]
                else:
                    # Look for any array that might contain visualization objects
                    for key, value in suggestions.items():
                        if isinstance(value, list) and len(value) > 0:
                            if isinstance(value[0], dict) and ('chart_type' in value[0] or 'plotly_fig_type' in value[0]):
                                suggestions = value
                                break
            
            # Ensure we have a list to iterate over
            if not isinstance(suggestions, list):
                suggestions = [suggestions]
                
            for i, suggestion in enumerate(suggestions):
                with st.container():
                    # Extract title and description, providing defaults if not found
                    title = suggestion.get('title', f"Visualization {i+1}")
                    description = suggestion.get('description', "No description available")
                    
                    st.markdown(f"""
                    ### {title}
                    {description}
                    """)
                    
                    # Create visualization
                    try:
                        fig = create_visualization_from_suggestion(df, suggestion)
                        if fig:
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.warning("Could not create visualization with the provided columns.")
                    except Exception as e:
                        st.error(f"Error creating visualization: {str(e)}")
                    
                    # Add feedback buttons
                    create_feedback_buttons(
                        "visualization", 
                        f"viz_{i}", 
                        original_response=json.dumps(suggestion)
                    )
                    
                    st.markdown("---")
        
        # Custom visualization builder
        st.subheader("Custom Visualization Builder")
        
        # Select chart type
        chart_type = st.selectbox(
            "Select chart type",
            ["Bar Chart", "Line Chart", "Scatter Plot", "Histogram", "Box Plot", "Heatmap", "Pie Chart"]
        )
        
        # Columns based on chart type
        if chart_type in ["Bar Chart", "Line Chart", "Scatter Plot"]:
            x_col = st.selectbox("X-axis", df.columns)
            y_col = st.selectbox("Y-axis", df.columns)
            color_col = st.selectbox("Color by (optional)", ["None"] + df.columns.tolist())
            color_col = None if color_col == "None" else color_col
            
            if st.button("Create Visualization"):
                try:
                    if chart_type == "Bar Chart":
                        fig = px.bar(df, x=x_col, y=y_col, color=color_col, title=f"{y_col} by {x_col}")
                    elif chart_type == "Line Chart":
                        fig = px.line(df, x=x_col, y=y_col, color=color_col, title=f"{y_col} over {x_col}")
                    elif chart_type == "Scatter Plot":
                        fig = px.scatter(df, x=x_col, y=y_col, color=color_col, title=f"{y_col} vs {x_col}")
                    
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"Error creating visualization: {str(e)}")
        
        elif chart_type == "Histogram":
            col = st.selectbox("Column", df.select_dtypes(include=np.number).columns)
            bins = st.slider("Number of bins", 5, 100, 20)
            
            if st.button("Create Visualization"):
                try:
                    fig = px.histogram(df, x=col, nbins=bins, title=f"Distribution of {col}")
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"Error creating visualization: {str(e)}")
        
        elif chart_type == "Box Plot":
            y_col = st.selectbox("Value column", df.select_dtypes(include=np.number).columns)
            x_col = st.selectbox("Category column (optional)", ["None"] + df.columns.tolist())
            x_col = None if x_col == "None" else x_col
            
            if st.button("Create Visualization"):
                try:
                    fig = px.box(df, x=x_col, y=y_col, title=f"Box Plot of {y_col}")
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"Error creating visualization: {str(e)}")
        
        elif chart_type == "Heatmap":
            corr_matrix = df.select_dtypes(include=np.number).corr()
            
            if st.button("Create Visualization"):
                try:
                    fig = px.imshow(
                        corr_matrix, 
                        text_auto=True, 
                        aspect="auto", 
                        color_continuous_scale="RdBu_r",
                        title="Correlation Heatmap"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"Error creating visualization: {str(e)}")
        
        elif chart_type == "Pie Chart":
            values_col = st.selectbox("Values", df.select_dtypes(include=np.number).columns)
            names_col = st.selectbox("Names", df.columns)
            
            if st.button("Create Visualization"):
                try:
                    # For pie charts, we need to aggregate the data
                    pie_data = df.groupby(names_col)[values_col].sum().reset_index()
                    fig = px.pie(pie_data, values=values_col, names=names_col, title=f"{values_col} by {names_col}")
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"Error creating visualization: {str(e)}")

# Navigation buttons at the bottom
st.markdown("---")
col1, col2, col3 = st.columns(3)
with col1:
    if st.button("‚Üê Data Transformation", use_container_width=True):
        st.switch_page("pages/04_Data_Transformation.py")
with col2:
    if st.button("Home", use_container_width=True):
        st.switch_page("app.py")
with col3:
    if st.button("Export Reports ‚Üí", use_container_width=True):
        st.switch_page("pages/06_Export_Reports.py")